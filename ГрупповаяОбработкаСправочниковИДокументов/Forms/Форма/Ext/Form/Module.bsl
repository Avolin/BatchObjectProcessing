&НаКлиенте
Процедура ТаблицаВидыОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если СтрДлина(ТипОбъекта) = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите тип объекта";
		Сообщение.Поле = "ТипОбъекта";
		Сообщение.Сообщить();
		
	Иначе 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипОбъекта", ТипОбъекта);
		ПараметрыОткрытия.Вставить("ТаблицаВидыОбъектов", ТаблицаВидыОбъектов);
		ПараметрыОткрытия.Вставить("ОбрабатыватьТЧ", ОбрабатыватьТЧ);
		
		ФормаВыбораВидовОбъектов = ПолучитьФорму("ВнешняяОбработка.ГрупповаяОбработкаСправочниковИДокументов.Форма.ФормаВыбораТаблицы", ПараметрыОткрытия);
		
		РезультатВыбора = ФормаВыбораВидовОбъектов.ОткрытьМодально();
		
		Если РезультатВыбора <> Неопределено Тогда
			
			Если ОбрабатыватьТЧ = Ложь Тогда 
				
				ТаблицаМетаданных.Очистить();
				ТаблицаВидыОбъектов.Очистить();
				
				Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
					
					НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
					НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение;
					НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
					
				КонецЦикла;
				
				ТаблицаРезультатОтбор.Очистить();
				
				ИнициализироватьСКД();
				
				ВыберитеДействие = "";
				
			Иначе
				
				ТаблицаМетаданных.Очистить();
				ТаблицаВидыОбъектов.Очистить();
				ТаблицаРезультатОтбор.Очистить();
				
				Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
					
					НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
					НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение.ИмяОбъекта;
					НоваяСтрока.ИмяТЧ = ЭлементРезультат.Значение.ИмяТЧ;
					НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
					
				КонецЦикла;
				
				ИнициализироватьСКД();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИнициализироватьДействия();
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДействия()
	
	НесколькоРеквизитов = Ложь;
	
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
		
		НесколькоРеквизитов = Истина;
		
	КонецЕсли;
	
	Элементы.ВыберитеДействие.СписокВыбора.Очистить();
	
	НовоеДействие = Элементы.ВыберитеДействие.СписокВыбора.Добавить("ИзменитьПометкаУдаления", "Изменить: [Пометка на удаление]");
	НовоеДействие = Элементы.ВыберитеДействие.СписокВыбора.Добавить("ИзменитьРеквизиты", "Изменить: [Реквизиты]");
	
	Если ТипОбъекта = "Документы" Тогда
		
		Элементы.ВыберитеДействие.СписокВыбора.Добавить("ИзменитьПроведение", "Изменить: [Проведение документа]");
		
		Если ТаблицаВидыОбъектов.Количество() = 1 
			И ЕстьУправлениеПечатью Тогда
			Элементы.ВыберитеДействие.СписокВыбора.Добавить("Печать", "Печать документов");
		КонецЕсли;
	
	ИначеЕсли ТипОбъекта = "Задачи" Тогда
		
		Элементы.ВыберитеДействие.СписокВыбора.Добавить("ВыполнитьЗадачу", "Выполнить задачу");
		
	ИначеЕсли ТипОбъекта = "БизнесПроцессы" Тогда
		
		Элементы.ВыберитеДействие.СписокВыбора.Добавить("Старт", "Стартовать Бизнес-Процесс");
		
	КонецЕсли;
	
	Объект.ФлагИзмененияРеквизитов = Истина; //Затычка
	
	Если Объект.ФлагИзмененияРеквизитов Тогда
		
		Для Каждого ЭлементМетаданных Из ТаблицаМетаданных Цикл
			
			//  --> Add Kostromin A. 
			// English script support
			Если (ЭлементМетаданных.ИмяРеквизита <> "Ссылка" OR ЭлементМетаданных.ИмяРеквизита <> "Ref")
				И (ЭлементМетаданных.ИмяРеквизита <> "НомерСтроки" OR ЭлементМетаданных.ИмяРеквизита <> "LineNumber")
				И ЭлементМетаданных.ИмяРеквизита <> "ИмяТЧ" Тогда
				// <-- Add Kostromin A.
			
				Элементы.ВыберитеДействие.СписокВыбора.Добавить(ЭлементМетаданных.ИмяРеквизита, "Изменить рекзвизит: " + ?(СтрДлина(ЭлементМетаданных.СинонимРеквизита) > 0, ЭлементМетаданных.СинонимРеквизита, ЭлементМетаданных.ИмяРеквизита));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбрабатыватьТЧ Тогда
		
		Элементы.ВыберитеДействие.СписокВыбора.Добавить("УдалитьСтроки", "Удалить отмеченные строки");
	
	КонецЕсли;
	
	УдалитьЭлементНовоеЗначение();
	
	Если НесколькоРеквизитов Тогда
		
		ВыберитеДействие = "ИзменитьРеквизиты";		
		ПодготовитьПараметрыДопРеквизиты();
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементНовоеЗначение()
	
	МассивРеквизитовНаУдаление = Новый Массив;
	МассивЭлементовНаУдаление = Новый Массив;
	
	Для Каждого ЭлементНовоеЗначение Из Элементы.ГруппаНовоеЗначение.ПодчиненныеЭлементы Цикл
		
		Если ЭлементНовоеЗначение.Имя <> "Затычко" Тогда
			
			МассивРеквизитовНаУдаление.Добавить(ЭлементНовоеЗначение.ПутьКДанным);
			МассивЭлементовНаУдаление.Добавить(ЭлементНовоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивРеквизитовНаУдаление.Количество() > 0 Тогда
		
		ЭтаФорма.ИзменитьРеквизиты(,МассивРеквизитовНаУдаление);
		
		Для Каждого ЭлементНаУдаление Из МассивЭлементовНаУдаление Цикл
			
			Элементы.Удалить(ЭлементНаУдаление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКД()
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	НовыйИсточник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	НовыйИсточник.Имя = "ИсточникДанных1";
	НовыйИсточник.ТипИсточникаДанных = "Local";
	
	НовыйНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НовыйНаборДанных.ИсточникДанных = "Local";
	
	НовыйНаборДанных.Имя = "Основной";
	НовыйНаборДанных.ИмяОбъекта = "Основной"; 	
	НовыйНаборДанных.ИсточникДанных = "ИсточникДанных1";
	
	ТаблицаМетаданных.Очистить();
	
	ТаблицаОбщихРеквизитов = Новый ТаблицаЗначений;
	
	ТаблицаОбщихРеквизитов.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаОбщихРеквизитов.Колонки.Добавить("КоличествоРеквизитов");
	
	МассивТиповСсылка = Новый Массив;
	
	Для Каждого Элементобъектов Из РезультатВыбора Цикл
		
		Если ТипОбъекта = "Справочники" Тогда
			
			СтрокаТипа = "СправочникСсылка.";
			
		ИначеЕсли ТипОбъекта = "Документы" Тогда 
			
			СтрокаТипа = "ДокументСсылка.";
			
		ИначеЕсли ТипОбъекта = "ПланыВидовРасчета" Тогда
			
			СтрокаТипа = "ПланВидовРасчетаСсылка.";
			
		ИначеЕсли  ТипОбъекта = "ПланыВидовХарактеристик" Тогда
			
			СтрокаТипа = "ПланВидовХарактеристикСсылка.";
			
		ИначеЕсли  ТипОбъекта = "БизнесПроцессы" Тогда
			
			СтрокаТипа = "БизнесПроцессСсылка.";
			
		ИначеЕсли  ТипОбъекта = "Задачи" Тогда
			
			СтрокаТипа = "ЗадачаСсылка.";
			
		ИначеЕсли  ТипОбъекта = "ПланыОбмена" Тогда
			
			СтрокаТипа = "ПланОбменаСсылка.";
			
		КонецЕсли;
		
		Если ОбрабатыватьТЧ = Ложь 
			или ТипЗнч(Элементобъектов.Значение) <> Тип("Структура") Тогда
			
			МассивТиповСсылка.Добавить(Тип(СтрокаТипа + Элементобъектов.Значение));
			
		Иначе
			
			МассивТиповСсылка.Добавить(Тип(СтрокаТипа + Элементобъектов.Значение.ИмяОбъекта));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатыватьТЧ = Ложь Тогда
		
		Для Каждого ОбъектВыбора Из РезультатВыбора Цикл
			
			КоличествоРеквизитов = Метаданные[ТипОбъекта][ОбъектВыбора.Значение].Реквизиты.Количество();
			
			Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].Реквизиты Цикл
									
				НоваяСтрока = ТаблицаМетаданных.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ОбъектМетаданных.Имя;
				НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
				НоваяСтрока.ОписаниеТипов = ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
				НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
						
				
			КонецЦикла;
			
			Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].СтандартныеРеквизиты Цикл
				
				//  --> Add Kostromin A. 
				// English script support
				Если ОбъектМетаданных.Имя = "Предопределенный" 
					Или ОбъектМетаданных.Имя = "ЭтоГруппа" 
					Или ОбъектМетаданных.Имя = "Ссылка" 
					OR ОбъектМетаданных.Имя = "Ref"
					OR ОбъектМетаданных.Имя = "Predefined" 
					OR ОбъектМетаданных.Имя = "IsFolder" Тогда
					// <-- Add Kostromin A.
					Продолжить;
					
				Иначе 
					

					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов = ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
								
				КонецЕсли;
				
			КонецЦикла;
			
			Если  ТипОбъекта = "Задачи" Тогда
				
				КоличествоРеквизитов = КоличествоРеквизитов +  Метаданные[ТипОбъекта][ОбъектВыбора.Значение].РеквизитыАдресации.Количество();
				
				Для каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение].РеквизитыАдресации Цикл
										
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов = ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип); 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
									
				КонецЦикла;
				
			КонецЕсли;
					
			КоличествоРеквизитов = КоличествоРеквизитов + Метаданные[ТипОбъекта][ОбъектВыбора.Значение].СтандартныеРеквизиты.Количество();
			
			НоваяСтрока = ТаблицаОбщихРеквизитов.Добавить();
			
			НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
			НоваяСтрока.КоличествоРеквизитов = КоличествоРеквизитов;
			
			Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
				
				ЭлементОбщегоРеквизита = ОбщийРеквизит.Состав.Найти(Метаданные[ТипОбъекта][ОбъектВыбора.Значение]); 
				
				Если ЭлементОбщегоРеквизита <> Неопределено 
					И Строка(ЭлементОбщегоРеквизита.Использование)  = Строка("Использовать") Тогда
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита = ОбщийРеквизит.Имя;
					НоваяСтрока.СинонимРеквизита = ОбщийРеквизит.Синоним;
					НоваяСтрока.ОписаниеТипов = ИсключитьНедопустимыеТипы(ОбщийРеквизит.Тип); 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение;
					
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОбъектВыбора Из РезультатВыбора Цикл
			
			Если ТипЗнч(ОбъектВыбора.Значение)  = Тип("Структура") Тогда
				
				КоличествоРеквизитов = Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].Реквизиты.Количество()
				+ Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].СтандартныеРеквизиты.Количество();
				
				Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].Реквизиты Цикл
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					
					НоваяСтрока.ИмяРеквизита = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов = ОбъектМетаданных.Тип; 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
					
				КонецЦикла;
				
				Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][ОбъектВыбора.Значение.ИмяОбъекта].ТабличныеЧасти[ОбъектВыбора.Значение.ИмяТЧ].СтандартныеРеквизиты Цикл
					
					НоваяСтрока = ТаблицаМетаданных.Добавить();		
					НоваяСтрока.ИмяРеквизита = ОбъектМетаданных.Имя;
					НоваяСтрока.СинонимРеквизита = ОбъектМетаданных.Синоним;
					НоваяСтрока.ОписаниеТипов = ОбъектМетаданных.Тип; 
					НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
					
				КонецЦикла;
				
				КС = Новый КвалификаторыСтроки(100);
				ОписаниеТиповС = Новый ОписаниеТипов(,,КС);
				
				НоваяСтрока = ТаблицаМетаданных.Добавить();		
				НоваяСтрока.ИмяРеквизита = "ИмяТЧ";
				НоваяСтрока.СинонимРеквизита = "Имя ТЧ";
				НоваяСтрока.ОписаниеТипов = ОписаниеТиповС; 
				НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта + ОбъектВыбора.Значение.ИмяТЧ;
				
				НоваяСтрока = ТаблицаОбщихРеквизитов.Добавить();
				
				НоваяСтрока.ОбъектМетаданных = ОбъектВыбора.Значение.ИмяОбъекта +  ОбъектВыбора.Значение.ИмяТЧ;
				НоваяСтрока.КоличествоРеквизитов = КоличествоРеквизитов;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОбщихРеквизитов.Сортировать("КоличествоРеквизитов возр");
	
	Если ТаблицаОбщихРеквизитов.Количество() > 1 Тогда
		
		ИсключитьУникальныеРеквизиты(ТаблицаОбщихРеквизитов);
		
	КонецЕсли;	
	
	ОписаниеТиповСсылка = Новый ОписаниеТипов(МассивТиповСсылка);
	
	НоваяСтрока = ТаблицаМетаданных.Добавить();
	
	//  --> Add Kostromin A. 				
	// English script support
	If IsRussianScript() Then
		НоваяСтрока.ИмяРеквизита = "Ссылка";
		НоваяСтрока.СинонимРеквизита = "Ссылка";
	Else
		НоваяСтрока.ИмяРеквизита = "Ref";
		НоваяСтрока.СинонимРеквизита = "Ref";	
	EndIf; 
	
	// <-- Add Kostromin A.
	
	НоваяСтрока.ОписаниеТипов = ОписаниеТиповСсылка;
	
	ТаблицаМетаданных.Сортировать("ИмяРеквизита возр");
	
	Для Каждого ЭлементРеквизит Из ТаблицаМетаданных Цикл
		
		НовоеПолеНабораДанных = НовыйНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеНабораДанных.Заголовок = ЭлементРеквизит.СинонимРеквизита;
		НовоеПолеНабораДанных.Поле = ЭлементРеквизит.ИмяРеквизита;
		НовоеПолеНабораДанных.ТипЗначения = ЭлементРеквизит.ОписаниеТипов;
		НовоеПолеНабораДанных.ПутьКДанным = ЭлементРеквизит.ИмяРеквизита;
		
		Если ЭлементРеквизит.ИмяРеквизита = "ИмяТЧ" Тогда
			
			  НовоеПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
			  НовоеПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НоваяГруппировка = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование = Истина;
	
	Для Каждого ЭлементРеквизит Из ТаблицаМетаданных Цикл
		
		НовоеПолеКомпоновкиДанных = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеКомпоновкиДанных.Использование = Истина;
		НовоеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ЭлементРеквизит.ИмяРеквизита);
		
		ВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = ЭлементРеквизит.СинонимРеквизита;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементРеквизит.ИмяРеквизита);
		
	КонецЦикла;
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	Объект.Компоновщик.Инициализировать(ИсточникНастроек);
	
	Объект.Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ТипОбъекта = "Документы" Тогда
		
		Если ОбрабатыватьТЧ Тогда
		НовоеПолеСортировки = Объект.Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		
		//  --> Add Kostromin A. 				
		// English script support
		If IsRussianScript() Then
			НовоеПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка.Дата");		
		Else
			НовоеПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("Ref.Date");		
		EndIf; 	
		// <-- Add Kostromin A.
		
		Иначе
		НовоеПолеСортировки = Объект.Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НовоеПолеСортировки.Поле = Новый ПолеКомпоновкиДанных("Дата");	
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "ПланыВидовХарактеристик" Тогда
		
		ИнициализироватьДопОтборХарактеристик();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДопОтборХарактеристик()
	
	ОписаниеТипов = Новый ОписаниеТипов;
	
	Для Каждого ВыбраннаяХарактеристика Из РезультатВыбора Цикл
		
		ТипыЗначенияХарактеристики = Метаданные.ПланыВидовХарактеристик[ВыбраннаяХарактеристика.Значение].Тип;
		ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ТипыЗначенияХарактеристики.Типы());
		
	КонецЦикла;
	
	ТипЗначенияХарактеристики = Новый ОписаниеТипов(ОписаниеТипов);
		
КонецПроцедуры

&НаСервере
Процедура ИсключитьУникальныеРеквизиты(ТаблицаОбщихРеквизитов)
	
	Эталон = ТаблицаОбщихРеквизитов.Получить(0).ОбъектМетаданных;
	
	ТаблицаРезультат = ТаблицаМетаданных.Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектМетаданных", Эталон);	
	
	ТаблицаЭталонныхРеквизитов = ТаблицаРезультат.Скопировать(Отбор);
	ТаблицаРезультат.Очистить();
	
	Для Каждого СтрокаЭталон Из ТаблицаЭталонныхРеквизитов Цикл
		
		ОтборПоЭталону = Новый Структура;
		ОтборПоЭталону.Вставить("ИмяРеквизита", СтрокаЭталон.ИмяРеквизита);
		
		НайденныеСтроки = ТаблицаМетаданных.НайтиСтроки(ОтборПоЭталону); 
		
		Если НайденныеСтроки.Количество() = ТаблицаОбщихРеквизитов.Количество() Тогда
			
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭталон);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	ТаблицаМетаданных.Очистить();
	ТаблицаМетаданных.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отобрать(Команда)
		
	Для Каждого КолонкаТаблицыФормы Из Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		
		Если КолонкаТаблицыФормы.Видимость = Истина Тогда
			
			Если КэшВидимыхКолонок.НайтиПоЗначению(КолонкаТаблицыФормы.Имя) = Неопределено тогда
				
				КэшВидимыхКолонок.Добавить(КолонкаТаблицыФормы.Имя);
			  
		  	КонецЕсли;	
		  
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ТаблицаВидыОбъектов.Количество() > 0 Тогда
		
		ОтобратьОбъектыСервер();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		//  --> Add Kostromin A. 
		// Emglish language support
		Сообщение.Текст = NStr("en='It is needed that at least one metadata object to be specified.';ru='Нужно выбрать хотя бы один объект метаданных'");		
		// <-- Add Kostromin A.
		Сообщение.Поле = "ТаблицаВидыОбъектов";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ВидимостьЭлементов();
	
	ОчиститьУО();
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьОбъектыСервер()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	РезультатОтбора = Новый ТаблицаЗначений;
	
	ТаблицаКопия = ТаблицаМетаданных.Выгрузить();
	ТаблицаКопия.Свернуть("ИмяРеквизита, СинонимРеквизита, ОписаниеТипов");
	
	Для Каждого ОбъектМетаданных Из ТаблицаКопия Цикл
		Если РезультатОтбора.Колонки.Найти(ОбъектМетаданных.ИмяРеквизита) = Неопределено Тогда
		НоваяКолонка = РезультатОтбора.Колонки.Добавить(ОбъектМетаданных.ИмяРеквизита, ОбъектМетаданных.ОписаниеТипов, ОбъектМетаданных.СинонимРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	МассивПолей = ТаблицаКопия.ВыгрузитьКолонку("ИмяРеквизита");
	
	СтрокаПолей = ПолучитьСтрокуИзМассиваПодстрок(МассивПолей,",");
	
	ДобавитьУдалитьРеквизиты(ТаблицаКопия);
	ТекстЗапроса = "";
	Счетчик = 1;
	
	Если ОбрабатыватьТЧ = Ложь Тогда
		
		Для Каждого ОтобранныйОбъект Из РезультатВыбора Цикл
			
			Если ТипОбъекта = "Справочники" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ Справочник." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
								
			ИначеЕсли ТипОбъекта = "Документы" Тогда 
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ Документ." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
				
			ИначеЕсли ТипОбъекта = "ПланыВидовРасчета" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ ПланВидовРасчета." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
				
			ИначеЕсли ТипОбъекта = "ПланыВидовХарактеристик" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ ПланВидовХарактеристик." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
			
			ИначеЕсли ТипОбъекта = "БизнесПроцессы" Тогда 
				
				ТекстЗапроса = ТекстЗапроса +  "ВЫБРАТЬ " + СтрокаПолей + " ИЗ БизнесПроцесс." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
				
			ИначеЕсли ТипОбъекта = "Задачи" Тогда	 
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ Задача." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
				
			ИначеЕсли ТипОбъекта = "ПланыОбмена" Тогда	 
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + СтрокаПолей + " ИЗ ПланОбмена." + ОтобранныйОбъект.Значение + " Как " + ОтобранныйОбъект.Значение;  
		
			КонецЕсли;
			
			Если Счетчик <> РезультатВыбора.Количество() Тогда
					
					ТекстЗапроса = ТекстЗапроса + " Объединить Все ";
					
			КонецЕсли;

			Счетчик = Счетчик + 1;
						
		КонецЦикла;
		
		
	Иначе 
		
		//  --> Add Kostromin A. 
		// English script support
		// Исправлен, оставалась запятая в конце, если колонка "ИмяТЧ" была последней в списке.
		
		СтрокаПолейЗапроса = "";
		
		Для Каждого СтрокаТМ Из ТаблицаМетаданных Цикл
			
			Если СтрокаТМ.ИмяРеквизита <> "ИмяТЧ" Тогда
				
				СтрокаПолейЗапроса = СтрокаПолейЗапроса + ", " + СтрокаТМ.ИмяРеквизита;
								
			КонецЕсли;
						
		КонецЦикла;
		
		СтрокаПолейЗапроса = RemoveSubStrLeft(СтрокаПолейЗапроса, ", ");
		// <-- Add Kostromin A.
		
		СтрокаПолейЗапроса = СтрокаПолейЗапроса +   ",""СТРОКАИМЯТЧ"" Как ИмяТЧ"; 
		
		ШаблонЗапроса = "ВЫБРАТЬ
		|	ОбъектСиноним." + СтрокаПолейЗапроса + " ИЗ ТИПОбъекта.ИмяОбъекта.ИмяТаблЧасти КАК ОбъектСиноним";
		
		Если ТипОбъекта = "Справочники" Тогда
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Справочник");
			
		ИначеЕсли ТипОбъекта = "Документы" Тогда
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Документ");
			
		ИначеЕсли ТипОбъекта = "ПланыВидовРасчета" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "ПланВидовРасчета");
			
		ИначеЕсли ТипОбъекта = "ПланыВидовХарактеристик" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "ПланВидовХарактеристик"); 
			
		ИначеЕсли ТипОбъекта = "БизнесПроцессы" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "БизнесПроцесс"); 
			
		ИначеЕсли ТипОбъекта = "Задачи" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "Задача"); 
			
		ИначеЕсли ТипОбъекта = "ПланыОбмена" Тогда	
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ТИПОбъекта", "ПланОбмена"); 
			
		КонецЕсли;				
		
		Счетчик = 1;
		КоличесвтоТЧ = РезультатВыбора.Количество();
		
		ТекстЗапроса = "";
		
		Для Каждого ОтобранныйОбъект Из РезультатВыбора Цикл 
			
			ТекстЗапросаПоОбъекту = СтрЗаменить(ШаблонЗапроса, "ИмяОбъекта", ОтобранныйОбъект.Значение.ИмяОбъекта);
			ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "ИмяТаблЧасти", ОтобранныйОбъект.Значение.ИмяТЧ);
			ТекстЗапросаПоОбъекту = СтрЗаменить(ТекстЗапросаПоОбъекту, "СТРОКАИМЯТЧ", ОтобранныйОбъект.Значение.ИмяТЧ);
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоОбъекту;
			
			Если Счетчик <> КоличесвтоТЧ Тогда
				
				ТекстЗапроса = ТекстЗапроса + " Объединить все ";
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = ТекстЗапроса;
		
		//Выборка = Запрос.Выполнить().Выбрать();
		
		//Пока Выборка.Следующий() Цикл
		//	
		//	НоваяСтрока = РезультатОтбора.Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		//	
		//КонецЦикла;	
		
	КонецЕсли;
	
	СхемаРезультатОтбора = Новый СхемаКомпоновкиДанных;
	
	НовыйИсточник = СхемаРезультатОтбора.ИсточникиДанных.Добавить();
	НовыйИсточник.Имя = "ИсточникДанных1";
	НовыйИсточник.ТипИсточникаДанных = "Local";
	
	НовыйНаборДанных = СхемаРезультатОтбора.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НовыйНаборДанных.ИсточникДанных = "Local";
	
	НовыйНаборДанных.Имя = "Основной";
	НовыйНаборДанных.ИсточникДанных = "ИсточникДанных1";	
	НовыйНаборДанных.Запрос = ТекстЗапроса;
	НовыйНаборДанных.АвтоЗаполнениеДоступныхПолей=Истина;
	
	НастройкиКомпоновки = Объект.Компоновщик.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаРезультатОтбора,
	НастройкиКомпоновки,,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаВывода = ТаблицаРезультатОтбор.Выгрузить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ТаблицаРезультат.Колонки.Добавить("Использовать");
	ТаблицаРезультат.ЗаполнитьЗначения(Истина, "Использовать"); 
	
	Если ТипОбъекта = "ПланыВидовХарактеристик"
		И ОтборПоТипуДляХарактеристик Тогда
		
		ТаблицаРезультатОтбор.Очистить();
		
		Для Каждого СтрокаТаблицыРезультат Из ТаблицаРезультат Цикл
			
			Для Каждого ТипыОтбора Из ТипЗначенияХарактеристики.Типы() Цикл
				
				Если РежимОтбораХарактеристик = "По выбранным значениям" Тогда									
				
					Если СтрокаТаблицыРезультат.ТипЗначения <> Null 
						И СтрокаТаблицыРезультат.ТипЗначения.СодержитТип(ТипыОтбора) Тогда
					
					НоваяСтрока = ТаблицаРезультатОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультат);
				
				КонецЕсли;
				
				ИначеЕсли РежимОтбораХарактеристик = "По доступным значениям" Тогда
					
					//  --> Add Kostromin A. 				
					// English script support
					If IsRussianScript() Then
						Если СтрокаТаблицыРезультат.Ссылка.Метаданные().Тип.СодержитТип(ТипыОтбора) Тогда
							
							НоваяСтрока = ТаблицаРезультатОтбор.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультат);
							
						КонецЕсли;					   
					Else
						Если СтрокаТаблицыРезультат.Ref.Метаданные().Тип.СодержитТип(ТипыОтбора) Тогда
							
							НоваяСтрока = ТаблицаРезультатОтбор.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРезультат);
							
						КонецЕсли;					   
					EndIf; 	
					// <-- Add Kostromin A.
					
				
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе		
	
		ТаблицаРезультатОтбор.Очистить();	
		ТаблицаРезультатОтбор.Загрузить(ТаблицаРезультат);
		
	КонецЕсли;
		
	ИнициализироватьДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивныйОбходОтбора(ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование = Истина Тогда
			
			Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти(Строка(ЭлементОтбора.ЛевоеЗначение));
			
			Если Колонка <> Неопределено Тогда
				
				Колонка.Видимость = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование = Истина Тогда
			
			РекурсивныйОбходОтбора(ЭлементОтбора.Элементы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементов()
		
	Для Каждого Колонка Из Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		//  --> Add Kostromin A. 
		// English script support				   
		Если (Колонка.Имя <> "Ссылка" AND Колонка.Имя <> "Ref")
			И (Колонка.Имя <> "НомерСтроки" AND Колонка.Имя <> "LineNumber")
			И Колонка.Имя <> "ТаблицаРезультатОтборОбработанУспешно"
			И Колонка.Имя <> "ИмяТЧ" Тогда
			// <-- Add Kostromin A.
			
			Колонка.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РекурсивныйОбходОтбора(Объект.Компоновщик.Настройки.Отбор.Элементы);
	
	Если ВыберитеДействие = "ИзменитьПометкаУдаления" Тогда
		
		Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("ПометкаУдаления");
		
		//  --> Add Kostromin A. 
		// English script support
		   If Колонка = Undefined Then
		   	Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("DeletionMark");
		   EndIf; 
		// <-- Add Kostromin A.
		Если Колонка <> Неопределено Тогда
			
			Колонка.Видимость = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВыберитеДействие = "ИзменитьПроведение" Тогда
		
		Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Проведен");
		
		//  --> Add Kostromin A. 
		// English script support
		   If Колонка = Undefined Then
		   	Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Posted");
		   EndIf; 
		// <-- Add Kostromin A.
		
		Если Колонка <> Неопределено Тогда
			
			Колонка.Видимость = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВыберитеДействие = "ВыполнитьЗадачу"  Тогда
		
		Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Выполнена");
		
		//  --> Add Kostromin A. 
		// English script support
		   If Колонка = Undefined Then
		   	Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Executed");
		   EndIf; 
		// <-- Add Kostromin A.
		
		Если Колонка <> Неопределено Тогда
			
			Колонка.Видимость = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВыберитеДействие = "Старт"  Тогда
				
		Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Стартован");
		
		//  --> Add Kostromin A. 
		// English script support
		   If Колонка = Undefined Then
		   	Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти("Started");
		   EndIf; 
		// <-- Add Kostromin A.
		
		Если Колонка <> Неопределено Тогда
			
			Колонка.Видимость = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяРеквизита", ВыберитеДействие);
		НайденноеЗначение = ТаблицаМетаданных.НайтиСтроки(Отбор);
		
		Если НайденноеЗначение.Количество() > 0 тогда
			
			НайденноеЗначение = НайденноеЗначение.ПОлучить(0).ИмяРеквизита;
			
			Колонка = Элементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти(НайденноеЗначение);
			
			Если Колонка <> Неопределено Тогда
				
				Колонка.Видимость = Истина;
				
			КонецЕсли;
			
			ТипЧисло = Тип("Число");
			
			Попытка
				Элементы.Формула.Видимость = (ТипЗнч(ЭтаФорма["НовоеЗначение"]) = ТипЧисло);
			Исключение
				Элементы.Формула.Видимость = Ложь;
			КонецПопытки;
		
		
		КонецЕсли;
		
	
	КонецЕсли;

	Если КэшВидимыхКолонок.Количество() > 0 Тогда
		
		Для Каждого ВидимаяКолонка Из КэшВидимыхКолонок Цикл
			
			КолонкаТаблицыФормы =
			Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти(ВидимаяКолонка.Значение);
			
			Если КолонкаТаблицыФормы <> Неопределено Тогда
				
				КолонкаТаблицыФормы.Видимость = Истина;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	Если ВыберитеДействие <> "ИзменитьРеквизиты"
		И ТипОбъекта <> "Константы" Тогда
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина;
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Истина;

	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРеквизиты(ТаблицаКопия = Неопределено)
	
	РеквизитыНаУдаление = Новый Массив;
	ЭлементыНаУдаление = Новый Массив;
	
	Для Каждого ЭлементРеквизита Из Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		
		РеквизитыНаУдаление.Добавить(ЭлементРеквизита.ПутьКДанным);
		ЭлементыНаУдаление.Добавить(ЭлементРеквизита);
		
	КонецЦикла;
	
	Если РеквизитыНаУдаление.Количество() > 0 Тогда
		
		ЭтаФорма.ИзменитьРеквизиты(,РеквизитыНаУдаление);
		
		Для Каждого ЭлементНаУдаление Из ЭлементыНаУдаление Цикл
			
			Элементы.Удалить(ЭлементНаУдаление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	МассивРеквизитов = Новый Массив;
	
	Если ТаблицаКопия <> Неопределено Тогда
		
		Для Каждого ЭлементРекзвизита Из ТаблицаКопия Цикл
			
			ТипРеквизита = ИсключитьНедопустимыеТипы(ЭлементРекзвизита.ОписаниеТипов);
			
			НовыйРеквизитФормы = Новый РеквизитФормы(ЭлементРекзвизита.ИмяРеквизита
			, ТипРеквизита
			, "ТаблицаРезультатОтбор"
			, ЭлементРекзвизита.СинонимРеквизита);
			
			МассивРеквизитов.Добавить(НовыйРеквизитФормы);
			
		КонецЦикла;	
		
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Для Каждого ЭлементРеквизита Из ТаблицаКопия Цикл
			
			НовыйЭлементРодитель = Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно;
			НовыйЭлемент = Элементы.Добавить(ЭлементРеквизита.ИмяРеквизита, Тип("ПолеФормы"), НовыйЭлементРодитель);
			НовыйЭлемент.ПутьКДанным = "ТаблицаРезультатОтбор." + ЭлементРеквизита.ИмяРеквизита;
			НовыйЭлемент.Заголовок = ?(СтрДлина(ЭлементРеквизита.СинонимРеквизита) = 0, ЭлементРеквизита.ИмяРеквизита, ЭлементРеквизита.СинонимРеквизита);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсключитьНедопустимыеТипы(ТипРеквизита) 
	
	    МассивНедопустимых = ПолучитьНедопустимыеТипы();
		
		МассивИсключаемыхТипов = Новый Массив;
		
		Для Каждого ЭлементНедопустимый Из МассивНедопустимых Цикл
			
			Если ТипРеквизита.СодержитТип(ЭлементНедопустимый) Тогда
				
				  МассивИсключаемыхТипов.Добавить(ЭлементНедопустимый);
				
			КонецЕсли;
			
		КонецЦикла;

		Если МассивИсключаемыхТипов.Количество() = 0 Тогда
			
			ОписаниеРеквизита = ТипРеквизита;
			
		Иначе
			
			ОписаниеРеквизита = Новый ОписаниеТипов(ТипРеквизита, , МассивИсключаемыхТипов);
			
		КонецЕсли;
		
		Возврат ОписаниеРеквизита;
		
КонецФункции

&НаСервереБезКонтекста
Функция  ПолучитьНедопустимыеТипы()
			
	МассивНедопустимыхТипов = Новый Массив;
	МассивНедопустимыхТипов.Добавить(Тип("ХранилищеЗначения"));
	//МассивНедопустимыхТипов.Добавить(Тип("НастройкиПостроителяДляОтбора"));
	
	Возврат МассивНедопустимыхТипов;
		
КонецФункции

&НаКлиенте
Процедура РедактироватьСКД(Команда)
	
	#Если ТолстыйКлиентУправляемоеПриложение тогда
		СКД = ПолучитьИзВременногоХранилища(АдресСКД);
		КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных;
		КонструкторСКД.УстановитьСхему(СКД);
		КонструкторСКД.Редактировать(ЭтаФорма);
		
	#Иначе 
		
		Сообщить("Функция работает только в режиме ТолстыйКлиентУправляемоеПриложение");
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВидыОбъектовПослеУдаления(Элемент)
	
	ТаблицаРезультатОтбор.Очистить();
	ДобавитьУдалитьРеквизиты();
	ИнициализироватьСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыберитеДействиеПриИзменении(Элемент)
	
	Формула = Ложь;
	
	УстановитьНовоеДействие();
	ВидимостьЭлементов();
	
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
		
		ПодготовитьДействиеИзменитьРеквизиты();
		
	ИначеЕсли ВыберитеДействие = "Печать" Тогда
		
		ПодготовитьСписокПечатныхФормОбъектов();
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
 Функция ТаблицаПечатныхФормОбъекта()
	 
	 ТаблицаПечатныхФорм = Новый ТаблицаЗначений;
	 
	 МодульУП = Вычислить("УправлениеПечатью");
	 
	 Если ТаблицаВидыОбъектов.Количество() > 0 Тогда
		 
		 ИмяМенеджерОбъекта = ТаблицаВидыОбъектов.Получить(0);
		 ФормаДокумента = "Документ." + ИмяМенеджерОбъекта.ИмяТаблицы + ".Форма.ФормаСписка";
		 
		 Если МодульУП <> Неопределено Тогда
			 
			 ТаблицаПечатныхФорм = МодульУП.КомандыПечатиФормы(ФормаДокумента);
			 
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Возврат ТаблицаПечатныхФорм;
	 
 КонецФункции
 

 &НаСервере
Процедура ПодготовитьСписокПечатныхФормОбъектов()
	
	ТаблицаПечатныхФорм = ТаблицаПечатныхФормОбъекта();
	
	МодульУП = Вычислить("УправлениеПечатью");
	
	
	Если ТаблицаПечатныхФорм.Количество() > 0 Тогда
		
		МассивТиповСЗ = Новый Массив;
		МассивТиповСЗ.Добавить(Тип("Строка"));
		КС = Новый КвалификаторыСтроки;
		ОписаниеТиповС = Новый ОписаниеТипов(МассивТиповСЗ,,,,КС);
		
		НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ОписаниеТиповС, , "Новое значение");
		
		МассивНовыхРекзвизитов = Новый Массив;
		МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
		
		ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
		
		НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыберитеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
		НовыйЭлемент = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
		НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
		НовыйЭлемент.Заголовок = "Укажите печатную форму";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
		
		Для Каждого ДоступнаяПечатнаяФорма Из ТаблицаПечатныхФорм Цикл
			
			НовыйЭлемент.СписокВыбора.Добавить(ДоступнаяПечатнаяФорма.Идентификатор, ДоступнаяПечатнаяФорма.Представление);
			
		КонецЦикла;
		
		//ЭтаФорма["НовоеЗначение"] = НовыйЭлемент.СписокВыбора.Получить(0).Значение;
		
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДействиеИзменитьРеквизиты()
	
	ПодготовитьПараметрыДопРеквизиты();
	
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
				
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина
		
	Иначе
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ТипОбъекта = "Константы" Тогда
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Истина;
	Иначе
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура  ПодготовитьПараметрыДопРеквизиты()
		
	КэшТаблицаРеквизиты = ТаблицаРеквизиты.Выгрузить();
	ТаблицаРеквизиты.Очистить();

	Для Каждого ЭлементМетаданных Из ТаблицаМетаданных Цикл
		
		//  --> Add Kostromin A. 
		// English script support	
		Если (ЭлементМетаданных.ИмяРеквизита <> "Ссылка" AND ЭлементМетаданных.ИмяРеквизита <> "Ref") 
			И ЭлементМетаданных.ИмяРеквизита <> "ИмяТЧ"  
			И (ЭлементМетаданных.ИмяРеквизита <> "НомерСтроки" AND ЭлементМетаданных.ИмяРеквизита <> "LineNumber") 
			И (ЭлементМетаданных.ИмяРеквизита <> "Предопределенный" AND ЭлементМетаданных.ИмяРеквизита <> "Predefined") Тогда
			// <-- Add Kostromin A.
			
			НоваяСтрока = ТаблицаРеквизиты.Добавить();				
			
			НоваяСтрока.ИмяРеквизита           		 =  ЭлементМетаданных.ИмяРеквизита;
			
			Если СтрДлина(ЭлементМетаданных.СинонимРеквизита) = 0 Тогда
				
				НоваяСтрока.СинонимРеквизита 		     =  ЭлементМетаданных.ИмяРеквизита;
				
			Иначе
				
				НоваяСтрока.СинонимРеквизита 		     =  ЭлементМетаданных.СинонимРеквизита;
				
			КонецЕсли;
			
			НоваяСтрока.ДоступныеТипыЗначений =  ЭлементМетаданных.ОписаниеТипов;
			НоваяСтрока.Изменять                		      =  Ложь;
			
			НайденнаяСтрокаКэша = КэшТаблицаРеквизиты.Найти(НоваяСтрока.ИмяРеквизита, "ИмяРеквизита");
			
			Если  НайденнаяСтрокаКэша <> Неопределено Тогда
				
				Если  НоваяСтрока.ДоступныеТипыЗначений.СодержитТип(ТипЗнч(НайденнаяСтрокаКэша.НовоеЗначение)) Тогда
					
					НоваяСтрока.НовоеЗначение = НайденнаяСтрокаКэша.НовоеЗначение;
					НоваяСтрока.Изменять = НайденнаяСтрокаКэша.Изменять;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ДоступныеТипыЗначений = ЭлементМетаданных.ОписаниеТипов;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНовоеДействие()
	
	УдалитьЭлементНовоеЗначение();
	МожноСтартовать = Ложь;
	
	МассивНовыхРекзвизитов = Новый Массив;
	
	Если ВыберитеДействие = "ИзменитьПометкаУдаления" 
		Или ВыберитеДействие = "ИзменитьПроведение" Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Булево"));
		
		ОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);
		
		НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ОписаниеТиповБулево, , "Новое значение");
		
		МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
		
		ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
		
		НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыберитеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
		НовыйЭлемент = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
		НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		
	ИначеЕсли ВыберитеДействие = "ВыполнитьЗадачу"
		Или (ВыберитеДействие = "Старт" 
		И ОбрабатыватьТЧ = Истина) Тогда 
		
		//Никакого выбора действия нет
		
	ИначеЕсли ВыберитеДействие = "Старт" 
		И ОбрабатыватьТЧ = Ложь Тогда
		
		БизнесПроцессПример = РезультатВыбора.Получить(0).Значение;
		
		//Если выбран 1 Бизнес-Процесс и 	
		//то можно предоставить 
		//пользователю выбор точки старта                      	
		
		Если РезультатВыбора.Количество() = 1 Тогда
			
			КартаМаршрута = БизнесПроцессы[БизнесПроцессПример] .ПолучитьКартуМаршрута();
			
			СписокТочек = Новый СписокЗначений;
			
			Счетчик = 0;
			
			Для Каждого ЭлементСхемы Из КартаМаршрута.ЭлементыГрафическойСхемы  Цикл
				
				Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыСтарт") Тогда
					
					СписокТочек.Добавить(Счетчик, ЭлементСхемы.Наименование);
					
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			Если СписокТочек.Количество()  > 0 Тогда
				
				МожноСтартовать = Истина;
				
				МассивТС = Новый Массив;
				МассивТС.Добавить(Тип("Строка"));
				
				ОписаниеТиповТС = Новый ОписаниеТипов(МассивТС);
				НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ОписаниеТиповТС, , "Точка старта");
				
				МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
				
				ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
				
				НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыберитеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
				НовыйЭлемент = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
				НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.КнопкаСпискаВыбора = Истина;
				НовыйЭлемент.РедактированиеТекста = Ложь;
				
				Для Каждого ТочкаСтартаБП Из СписокТочек Цикл
					
					НовыйЭлемент.СписокВыбора.Добавить(ТочкаСтартаБП.Значение, ТочкаСтартаБП.Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяРеквизита", ВыберитеДействие);
		НайденноеЗначение = ТаблицаМетаданных.НайтиСтроки(Отбор);
		
		ТипЧисло = Тип("Число");
		
		Если НайденноеЗначение.Количество() > 0 тогда
			
			НайденноеЗначение = НайденноеЗначение.Получить(0);
			
			
			Если Не Формула Тогда
				
				ТипЗначения = НайденноеЗначение.ОписаниеТипов;
				
			Иначе 
				
				КС = Новый КвалификаторыСтроки();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				
				ТипЗначения = Новый ОписаниеТипов(МассивТипов,,,,КС);
				
			КонецЕсли;
			
			НовыйРекзвизитФормы = Новый РеквизитФормы("НовоеЗначение", ТипЗначения, , "Новое значение");
			
			МассивНовыхРекзвизитов.Добавить(НовыйРекзвизитФормы);
			
			ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРекзвизитов);
			
			Если Формула Тогда
				
				ЭтаФорма["НовоеЗначение"] = "НовоеЗначение = СтароеЗначение";
				
			КонецЕсли;
			
			НовыйЭлементРодитель = Элементы.ГруппаДействие.ПодчиненныеЭлементы.ГруппаВыберитеДействиеОсновное.ПодчиненныеЭлементы.ГруппаНовоеЗначение;
			НовыйЭлемент = Элементы.Добавить("НовоеЗначение", Тип("ПолеФормы"), НовыйЭлементРодитель);
			НовыйЭлемент.ПутьКДанным = "НовоеЗначение";
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			
			Если Формула Тогда
				
				НовыйЭлемент.КнопкаВыбора = Истина;
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ФормулаНачалоВыбора");
				
			КонецЕсли;
					
			Если ВыберитеДействие = "ТипЗначения" 
				И ТипОбъекта = "ПланыВидовХарактеристик" Тогда
				
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ТипЗначенияХарактеристикНачалоВыбора");
				
			КонецЕсли;
							
			//Элементы.ФормаВыполнитьДействиеПроцент.Видимость = НайденноеЗначение.ОписаниеТипов.СодержитТип(ТипЧисло) ;
								
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	П = Новый Структура;
	П.Вставить("Формула", ЭтаФорма["НовоеЗначение"]);
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ИмяОбъекта = ПолучитьИмяОбработки();
		
	ОткрытьФорму(ИмяОбъекта + ".ГрупповаяОбработкаСправочниковИДокументов.Форма.ВводФормулы", П, Элемент);
		
КонецПроцедуры	

&НаКлиенте
Процедура  ТипЗначенияХарактеристикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДоступныхТипов = ПолучитьДоступныеДляУстановкиТипыЗначений();
	
	П = Новый Структура;
	П.Вставить("МассивТипов", ЭтаФорма["НовоеЗначение"].Типы());
	П.Вставить("ДоступныеТипы", Новый ОписаниеТипов(МассивДоступныхТипов));
	
	ИмяОбъекта = ПолучитьИмяОбработки();
	
	Результат = 	ОткрытьФормуМодально(ИмяОбъекта + ".Форма.ФормаВыбораТиповХарактеристики", П);
	
	Если Результат <> Неопределено Тогда
		
		МассивТипов = Новый Массив;
		
		Для Каждого ВыбранныйТип Из Результат Цикл
			
			Если ВыбранныйТип.Пометка Тогда
				
				МассивТипов.Добавить(ВыбранныйТип.Значение);
				
			КонецЕсли;			
			
		КонецЦикла;
		
		ЭтаФорма["НовоеЗначение"] = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеДляУстановкиТипыЗначений()
	  //itl
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("МассивТипов");
	ТаблицаТипов.Колонки.Добавить("КоличествоРазличных");
	
	Для Каждого ВыбраннаяХарактеристика Из РезультатВыбора Цикл
		
		ТипыЗначенияХарактеристики = Метаданные.ПланыВидовХарактеристик[ВыбраннаяХарактеристика.Значение].Тип;
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.МассивТипов = ТипыЗначенияХарактеристики.Типы();
		НоваяСтрока.КоличествоРазличных = НоваяСтрока.МассивТипов.Количество();
		
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("КоличествоРазличных Возр");
	
	МассивДоступныхТипов = Новый Массив;
	
	СтрокаЭталон = ТаблицаТипов.Получить(0);
	
	Для Каждого ЭлементЭталона Из СтрокаЭталон.МассивТипов Цикл
		
		ВходитВоВсе = Истина;

		Если ТаблицаТипов.Количество() > 1 Тогда
						
			Для Х = 1 По ТаблицаТипов.Количество() - 1 Цикл
								
				СтрокаСравнение = ТаблицаТипов.Получить(Х);
				
				ОписаниеТиповСравнение = Новый ОписаниеТипов(СтрокаСравнение.МассивТипов);
				
				Если ОписаниеТиповСравнение.СодержитТип(ЭлементЭталона) = Ложь Тогда
					
					ВходитВоВсе = Ложь;
					Прервать;
					
				КонецЕсли;
					
			КонецЦикла;	
			
		КонецЕсли;
		
		Если ВходитВоВсе Тогда
			
			 МассивДоступныхТипов.Добавить(ЭлементЭталона);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДоступныхТипов;
		
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если СтрДлина(ВыберитеДействие) = 0
		И ТипОбъекта <> "Константы" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите действие!";
		Сообщение.Поле = "ВыберитеДействие";
		
		Сообщение.Сообщить();
		
	Иначе 
		
		
		Состояние("Выполняется: " + ВыберитеДействие);
		Если Не ВыберитеДействие = "Печать" Тогда
			ВыполнитьВыбранноеДействие();
		Иначе 
			ВыполнитьПечатьДокументовКлиент();
		КонецЕсли;
		Состояние("Выполнено: " + ВыберитеДействие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПечатьДокументовКлиент()
	
	Если ЕстьУправлениеПечатью Тогда
		
		ИДКомандыПечати = ВыполнитьПечатьДокументовСервер();
		Если ИДКомандыПечати <> Неопределено Тогда
			
			ОбъектыПечати = Новый Массив;
			
			Для Каждого СтрокаОбъекта Из ТаблицаРезультатОтбор Цикл
				
				Если СтрокаОбъекта.Использовать Тогда
					//  --> Add Kostromin A. 
					// English script support	
					If IsRussianScript() Then
						ОбъектыПечати.Добавить(СтрокаОбъекта.Ссылка);
					Else
						ОбъектыПечати.Добавить(СтрокаОбъекта.Ref);
					EndIf; 
					// <-- Add Kostromin A.
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеКоманды", ИДКомандыПечати);
			ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
			
			МодульУПСК = Вычислить("УправлениеПечатьюСлужебныйКлиент");			   
			МодульУПСК .ВыполнитьПодключаемуюКомандуПечатиПодключениеРасширенияРаботыСФайлами(ОбъектыПечати, ДополнительныеПараметры);
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
 Функция  ВыполнитьПечатьДокументовСервер()
	 
	 Перем ИДКомандыПечати;
	 
	 ТаблицаПечатныхФорм = ТаблицаПечатныхФормОбъекта();
	 
	 Для Каждого СтрокаПЧ Из ТаблицаПечатныхФорм Цикл
		 
		 Если СтрокаПЧ.Идентификатор = ЭтаФорма["НовоеЗначение"] Тогда
			 
			 ИДКомандыПечати = СтрокаПЧ;
			 Прервать;
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Если ИДКомандыПечати <> Неопределено Тогда
		 
		МодульОН = Вычислить("ОбщегоНазначения");
	 	ИДКомандыПечати = МодульОН.СтрокаТаблицыЗначенийВСтруктуру(ИДКомандыПечати)
		
 	КонецЕсли;
 
	 Возврат ИДКомандыПечати;
	 
 КонецФункции
 
&НаСервере
Процедура ВыполнитьВыбранноеДействие()
	
	ОчиститьУО();
	
	ТаблицаОбработки = ТаблицаРезультатОтбор.Выгрузить();
	
	Если Объект.ВыполнятьВТранзакции Тогда
		
		НачатьТранзакцию();	
		
	КонецЕсли;
	
	Если ВыберитеДействие = "УдалитьСтроки" Тогда
		
		ВыполнитьДействиеУдалитьСтрокиТЧ(ТаблицаРезультатОтбор);
		
	ИначеЕсли ТипОбъекта  = "Константы" Тогда
		
		Для Каждого  СтрокаКонстанта Из ТаблицаРеквизиты Цикл
			
			Если  СтрокаКонстанта.Изменять Тогда
				
				Попытка
					
					ВыполнитьДействиеИзменитьКонстанты(СтрокаКонстанта);		
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОписаниеОшибки();
					Сообщение.Сообщить();
					
					Если Объект.ВыполнятьВТранзакции Или
						(Не Объект.ВыполнятьВТранзакции И Не Объект.НеПрерыватьВыполнениеПриОшибке) Тогда
						
						Прервать;
						
					КонецЕсли;
					
               КонецПопытки;

			КонецЕсли;
	
		КонецЦикла;
		
	Иначе 
				
		Если ОбрабатыватьТЧ Тогда	
			
			ТаблицаОбъектов = ТаблицаРезультатОтбор.Выгрузить();
			ТаблицаОбъектов =ТаблицаОбъектов.Скопировать(Новый Структура("Использовать", Истина));
			//  --> Add Kostromin A. 
			// English script support
			If IsRussianScript() Then
				ТаблицаОбъектов .Свернуть("Ссылка");
			Else
				ТаблицаОбъектов .Свернуть("Ref");
			EndIf; 
			// <-- Add Kostromin A.
			
			Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
				
				ОтборСтрок = Новый Структура;
				ОтборСтрок.Вставить("Использовать", Истина);
				
				//  --> Add Kostromin A. 
				// English script support
				If IsRussianScript() Then
					ОтборСтрок.Вставить("Ссылка", СтрокаОбъекта.Ссылка);
					ОбрабатываемыйОбъект = СтрокаОбъекта.Ссылка.ПолучитьОбъект();
					
				Else
					ОтборСтрок.Вставить("Ref", СтрокаОбъекта.Ref);
					ОбрабатываемыйОбъект = СтрокаОбъекта.Ref.ПолучитьОбъект();					
				EndIf; 
				// <-- Add Kostromin A.
				
								
				Для Каждого ДопСвойство Из Объект.ДополнительныеСвойства Цикл
					
					ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
					
				КонецЦикла;

				Если Объект.ВыполнятьВРежимеЗагрузки Тогда
						
						ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
						
				КонецЕсли;

				НайденныеСтроки = ТаблицаРезультатОтбор.НайтиСтроки(ОтборСтрок);
				
				Для Каждого  ОтобранныйЭлемент Из НайденныеСтроки Цикл
					
					Попытка
						
						ВыполнитьДействиеСтрокаТЧ(ОбрабатываемыйОбъект,  ВыберитеДействие, ОтобранныйЭлемент);
						
					Исключение
						
						Если ТранзакцияАктивна() Тогда
							
							ОтменитьТранзакцию();
							
						КонецЕсли;
						
						ОтобранныйЭлемент.ОбработанУспешно = "Нет";
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.УстановитьДанные(ОбрабатываемыйОбъект);
						Сообщение.Сообщить();
						
						Если Объект.ВыполнятьВТранзакции Или
							(Не Объект.ВыполнятьВТранзакции И Не Объект.НеПрерыватьВыполнениеПриОшибке) Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецПопытки;

					
				КонецЦикла;
				
				Попытка
						
						ОбрабатываемыйОбъект.Записать();
						
					Исключение
						
						Если ТранзакцияАктивна() Тогда
							
							ОтменитьТранзакцию();
							
						КонецЕсли;
												
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.УстановитьДанные(ОбрабатываемыйОбъект);
						Сообщение.Сообщить();
						
						Если Объект.ВыполнятьВТранзакции Или
							(Не Объект.ВыполнятьВТранзакции И Не Объект.НеПрерыватьВыполнениеПриОшибке) Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецПопытки;

				
			КонецЦикла;
			
			
		Иначе 
			
			Для Каждого ОтобранныйЭлемент Из ТаблицаРезультатОтбор Цикл
				
				Если ОтобранныйЭлемент.Использовать Тогда
					//  --> Add Kostromin A. 
					// English script support
					If IsRussianScript() Then
						ОбрабатываемыйОбъект = ОтобранныйЭлемент.Ссылка.ПолучитьОбъект();					
					Else
						ОбрабатываемыйОбъект = ОтобранныйЭлемент.Ref.ПолучитьОбъект();					
					EndIf; 					
					// <-- Add Kostromin A.
					ОтобранныйЭлемент.ОбработанУспешно = "Да";
					
					Если Объект.ВыполнятьВРежимеЗагрузки Тогда
						
						ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
						
					КонецЕсли;
					
					Для Каждого ДопСвойство Из Объект.ДополнительныеСвойства Цикл
					
						ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
					
					КонецЦикла;

					Попытка
						
						ВыполнитьДействиеСтрокаТЧ(ОбрабатываемыйОбъект,  ВыберитеДействие, ОтобранныйЭлемент);
												
					Исключение
						
						Если ТранзакцияАктивна() Тогда
							
							ОтменитьТранзакцию();
							
						КонецЕсли;
						
						ОтобранныйЭлемент.ОбработанУспешно = "Нет";
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.УстановитьДанные(ОбрабатываемыйОбъект);
						Сообщение.Сообщить();
						
						Если Объект.ВыполнятьВТранзакции Или
							(Не Объект.ВыполнятьВТранзакции И Не Объект.НеПрерыватьВыполнениеПриОшибке) Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецПопытки;
					
				Иначе
					
					ОтобранныйЭлемент.ОбработанУспешно = "НеОбрабатывался";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
	 	
	Если Объект.ВыполнятьВТранзакции 
		И ТранзакцияАктивна() Тогда
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Если Не ВыберитеДействие = "УдалитьСтроки"
		И Не ТипОбъекта = "Константы" Тогда
		ОбновитьПослеВыполнения();
	ИначеЕсли ТипОбъекта ="Константы" Тогда
		 ЗаполнитьКонстанты();
	Иначе
		ОтобратьОбъектыСервер(); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеИзменитьКонстанты(СтрокаКонстанты)	
	
	КонстантаМенеджер = Константы[СтрокаКонстанты.ИмяРеквизита].СоздатьМенеджерЗначения();
	
	КонстантаМенеджер.Прочитать();
	
	Для Каждого ДопСвойство Из Объект.ДополнительныеСвойства Цикл
		
		КонстантаМенеджер.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
		
	КонецЦикла;
	
	Если Объект.ВыполнятьВРежимеЗагрузки Тогда
		
		КонстантаМенеджер.ОбменДанными = Истина;
		
 	КонецЕсли;

	КонстантаМенеджер.Значение = СтрокаКонстанты.НовоеЗначение;
	КонстантаМенеджер.Записать();
	
	//Константы[СтрокаКонстанты.ИмяРеквизита].Установить(СтрокаКонстанты.НовоеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеСтрокаТЧ(ОбрабатываемыйОбъект, ВыбранноеДействие, ОтобранныйЭлемент)
	
	Если ВыберитеДействие = "ИзменитьПометкаУдаления" Тогда
		
		ОбрабатываемыйОбъект.УстановитьПометкуУдаления(ЭтаФорма["НовоеЗначение"]);
		
	ИначеЕсли ВыберитеДействие = "ИзменитьПроведение" Тогда
		
		Если ЭтаФорма["НовоеЗначение"] Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
		Иначе
			
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			
		КонецЕсли;
		
		ОбрабатываемыйОбъект.Записать(РежимЗаписи);
		
	ИначеЕсли ВыберитеДействие = "ВыполнитьЗадачу" Тогда
		
		ОбрабатываемыйОбъект.ВыполнитьЗадачу(); 
		
	ИначеЕсли ВыберитеДействие = "Старт" Тогда
		
		ИндексТочкаСтарта = Неопределено;
		
		Если МожноСтартовать Тогда
			
			ИндексТочкаСтарта = ЭтаФорма["НовоеЗначение"];
			
		КонецЕсли;
		
		Если ИндексТочкаСтарта <> Неопределено 
			И СтрДлина(ИндексТочкаСтарта) > 0 Тогда
			
			КартаМ = ОбрабатываемыйОбъект.ПолучитьКартуМаршрута();
			ТочкаМ = КартаМ.ЭлементыГрафическойСхемы.Получить(Число(ИндексТочкаСтарта));
			
		КонецЕсли;
		
		Если ИндексТочкаСтарта = Неопределено Тогда
			
			ОбрабатываемыйОбъект.Старт(); 
			
		Иначе 
			
			ОбрабатываемыйОбъект.Старт(ТочкаМ);
			
		КонецЕсли;
		
	ИначеЕсли ВыберитеДействие = "ИзменитьРеквизиты" Тогда

		ВыполнитьДействиеИзменитьРеквизиты(ОбрабатываемыйОбъект, ОтобранныйЭлемент);
		
	Иначе
		
		ВыполнитьДействиеИзменитьРеквизит(ОбрабатываемыйОбъект, ОтобранныйЭлемент);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеУдалитьСтрокиТЧ(ТаблицаРезультатОтбор)
	
	ТаблицаКопия = ТаблицаРезультатОтбор.Выгрузить();
	
	//  --> Add Kostromin A. 
	// English script support
	If IsRussianScript() Then
		ТаблицаКопия.Свернуть("Ссылка");
	Else
		ТаблицаКопия.Свернуть("Ref");
	EndIf; 					
	// <-- Add Kostromin A.
	
	
	Для Каждого СтрокаОбъект Из ТаблицаКопия Цикл
		
		//  --> Add Kostromin A. 
		// English script support
		If IsRussianScript() Then
			ОбрабатываемыйОбъект = СтрокаОбъект.Ссылка.ПолучитьОбъект();
		Else
			ОбрабатываемыйОбъект = СтрокаОбъект.Ref.ПолучитьОбъект();
		EndIf; 					
		// <-- Add Kostromin A.
				
		Для Каждого ДопСвойство Из Объект.ДополнительныеСвойства Цикл
			
			ОбрабатываемыйОбъект.ДополнительныеСвойства.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
			
		КонецЦикла;
				
		Если Объект.ВыполнятьВРежимеЗагрузки Тогда
				
			ОбрабатываемыйОбъект.ОбменДанными.Загрузка = Истина;
				
		КонецЕсли;

		ОтборПомеченных = Новый Структура;
		//  --> Add Kostromin A. 
		// English script support
		If IsRussianScript() Then
		ОтборПомеченных.Вставить("Ссылка", СтрокаОбъект.Ссылка);
		Else
		ОтборПомеченных.Вставить("Ref", СтрокаОбъект.Ссылка);
		EndIf; 					
		// <-- Add Kostromin A.
		
		ОтборПомеченных.Вставить("Использовать", Истина);
		
		НайденныеСтрокиНаУдаление = ТаблицаРезультатОтбор.НайтиСтроки(ОтборПомеченных);
		
		СписокСтрокНаУдаление = Новый СписокЗначений;
		
		//  --> Add Kostromin A. 
		// English script support
		
		If IsRussianScript() Then
			
			Для Каждого ПомеченнаяСтрока Из НайденныеСтрокиНаУдаление Цикл
				
				СписокСтрокНаУдаление.Добавить(ОбрабатываемыйОбъект[ПомеченнаяСтрока.ИмяТЧ].Получить(ПомеченнаяСтрока.НомерСтроки-1),  ПомеченнаяСтрока.ИмяТЧ);
				
			КонецЦикла;
			
		Else
			
			Для Каждого ПомеченнаяСтрока Из НайденныеСтрокиНаУдаление Цикл
				
				СписокСтрокНаУдаление.Добавить(ОбрабатываемыйОбъект[ПомеченнаяСтрока.ИмяТЧ].Получить(ПомеченнаяСтрока.LineNumber-1),  ПомеченнаяСтрока.ИмяТЧ);
				
			КонецЦикла;
			
		EndIf;
		
		// <-- Add Kostromin A.
		
		Для Каждого СтрокаНаУдаление Из СписокСтрокНаУдаление Цикл
			
			ОбрабатываемыйОбъект[СтрокаНаУдаление.Представление].Удалить(СтрокаНаУдаление.Значение);
			
		КонецЦикла;
		
		Попытка
			ОбрабатываемыйОбъект.Записать();
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбрабатываемыйОбъект);
			Сообщение.Сообщить();
				
			Если Объект.ВыполнятьВТранзакции Или
					(Не Объект.ВыполнятьВТранзакции И Не Объект.НеПрерыватьВыполнениеПриОшибке) Тогда
					
					Если ТранзакцияАктивна() Тогда
						
						ОтменитьТранзакцию();
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
					
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура  ВыполнитьДействиеИзменитьРеквизиты(ОбрабатываемыйОбъект, ОтобранныйЭлемент)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Изменять", Истина);
	
	ТаблицаИзменяемыеРеквизиты = ТаблицаРеквизиты.Выгрузить(ПараметрыОтбора);
	
	СтруктураЗаполнения = Новый Структура;
	
	Для Каждого ИзменяемыйРеквизит Из ТаблицаИзменяемыеРеквизиты Цикл
		
		СтруктураЗаполнения.Вставить(ИзменяемыйРеквизит.ИмяРеквизита, ИзменяемыйРеквизит.НовоеЗначение);
		
	КонецЦикла;
	
	Если ОбрабатыватьТЧ = Ложь Тогда
		
		ЗаполнитьЗначенияСвойств(ОбрабатываемыйОбъект, СтруктураЗаполнения);
		
	Иначе 
		
		//  --> Add Kostromin A. 
		// English script support
		If IsRussianScript() Then
			НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.НомерСтроки - 1);
		Else	
			НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.LineNumber - 1);
		EndIf; 
		// <-- Add Kostromin A.
		ЗаполнитьЗначенияСвойств(НужнаяСтрока, СтруктураЗаполнения);
			
	КонецЕсли;
	
	Если Не ОбрабатыватьТЧ Тогда
			
		ОбрабатываемыйОбъект.Записать(); 
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеИзменитьРеквизит(ОбрабатываемыйОбъект, ОтобранныйЭлемент)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяРеквизита", ВыберитеДействие);
	НайденноеЗначение = ТаблицаМетаданных.НайтиСтроки(Отбор);
	
	Если НайденноеЗначение.Количество() > 0 тогда
		
		НайденноеЗначение = НайденноеЗначение.Получить(0);
		
		Если ОбрабатыватьТЧ = Ложь Тогда
			
			Если Формула Тогда
				
				ОбрабатываемыйОбъект[ВыберитеДействие] = ВычислитьЗначениеФормулы(ЭтаФорма["НовоеЗначение"], ОбрабатываемыйОбъект[ВыберитеДействие],ОбрабатываемыйОбъект);
				
			Иначе 
				
				ОбрабатываемыйОбъект[ВыберитеДействие] = ЭтаФорма["НовоеЗначение"];
				
			КонецЕсли;
			
		Иначе
			
			//  --> Add Kostromin A. 
			// English script support
			If IsRussianScript() Then
				НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.НомерСтроки - 1);
			Else
				НужнаяСтрока = ОбрабатываемыйОбъект[ОтобранныйЭлемент.ИмяТЧ].Получить(ОтобранныйЭлемент.LineNumber - 1);
			EndIf; 
			
			// <-- Add Kostromin A. 
			
			Если Формула Тогда
				
				НужнаяСтрока[ВыберитеДействие] = ВычислитьЗначениеФормулы(ЭтаФорма["НовоеЗначение"], НужнаяСтрока[ВыберитеДействие],ОбрабатываемыйОбъект);
				
			Иначе 
				
				НужнаяСтрока[ВыберитеДействие] = ЭтаФорма["НовоеЗначение"];
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ОбрабатыватьТЧ Тогда
			
			ОбрабатываемыйОбъект.Записать(); 
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

 &НаСервере
 Функция ВычислитьЗначениеФормулы(Формула, СтароеЗначение, ОбрабатываемыйОбъект)
	 
	 НовоеЗначение = Неопределено;
	 
	 Попытка
		 
		 Выполнить Формула;	
		 
	 Исключение
		 
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.УстановитьДанные(ОбрабатываемыйОбъект);
		 Сообщение.Текст = ОписаниеОшибки();
		 Сообщение.Сообщить();
		 
	 КонецПопытки;
	 
	  Возврат НовоеЗначение;
	  
 КонецФункции
 
&НаСервере
Процедура ОбновитьПослеВыполнения()
	
	Если ОбрабатыватьТЧ = Ложь Тогда
		
		Для Каждого ЭлементСписка Из ТаблицаРезультатОтбор Цикл
			
			//  --> Add Kostromin A. 
			// English script support
			If IsRussianScript() Then
				ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементСписка.Ссылка);
			Else
				ЗаполнитьЗначенияСвойств(ЭлементСписка, ЭлементСписка.Ref);
			EndIf; 					
			// <-- Add Kostromin A.
			
			
		КонецЦикла;
		
	Иначе 
		
		Для Каждого ЭлементСписка Из ТаблицаРезультатОтбор Цикл
			
			//  --> Add Kostromin A. 
			// English script support
			If IsRussianScript() Then
				НужнаяСтрока = ЭлементСписка.Ссылка[ЭлементСписка.ИмяТЧ].Получить(ЭлементСписка.НомерСтроки - 1);
			Else
				НужнаяСтрока = ЭлементСписка.Ref[ЭлементСписка.ИмяТЧ].Получить(ЭлементСписка.LineNumber - 1);
			EndIf; 					
			// <-- Add Kostromin A.
			
			ЗаполнитьЗначенияСвойств(ЭлементСписка, НужнаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьОбщиеОбъектыУО();
	
	НовыйЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУО.Использование = Истина;
		
	НовыйЭлементОтбора = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРезультатОтбор.ОбработанУспешно");	
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = "Нет";
	
	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,,));
	
	НовоеПолеОформление =  НовыйЭлементУО.Поля.Элементы.Добавить();
	НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных("ТаблицаРезультатОтборИспользовать");
	
	Для Каждого  ДоступнаяКолонка Из Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ДоступнаяКолонка) = Тип("ПолеФормы") Тогда
			
			НовоеПолеОформление =  НовыйЭлементУО.Поля.Элементы.Добавить();
			НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ДоступнаяКолонка.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбщиеОбъектыУО()
	
	НовыйЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУО.Использование = Истина;
		
	НовыйЭлементОтбора = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОбъекта");	
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = "ПланыВидовРасчета";
	
	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Планы видов расчета");
	
	НовоеПолеОформление =  НовыйЭлементУО.Поля.Элементы.Добавить();
	НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных("ТипОбъекта");

	НовыйЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУО.Использование = Истина;
		
	НовыйЭлементОтбора = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОбъекта");	
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = "ПланыВидовХарактеристик";
	
	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Планы видов характеристик");
	
	НовоеПолеОформление =  НовыйЭлементУО.Поля.Элементы.Добавить();
	НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных("ТипОбъекта");
	
	НовыйЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУО.Использование = Истина;
		
	НовыйЭлементОтбора = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипОбъекта");	
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = "БизнесПроцессы";
	
	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Бизнес-процессы");
	
	НовоеПолеОформление =  НовыйЭлементУО.Поля.Элементы.Добавить();
	НовоеПолеОформление.Поле = Новый ПолеКомпоновкиДанных("ТипОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРезультатОтбор.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ИспользованиеМодальностиЗапрещено() Тогда
		
			Выполнить("ПоказатьЗначение(, ТекущиеДанные[Поле.Имя])");
			
		Иначе	
			
		ОткрытьЗначение(ТекущиеДанные[Поле.Имя]);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованиеМодальностиЗапрещено()
	
	ИспользованиеЗапрещено = Ложь;
	
	Попытка
		
		РежимИспользованияМодальности = Строка(Метаданные.РежимИспользованияМодальности);
		Если РежимИспользованияМодальности = "Использовать" Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;	
		КонецЕсли;
		Исключение	
		Возврат Ложь;		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	УстановитьФлажки(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлажки(Значение)
	
	Для Каждого СтрокаТО Из ТаблицаРезультатОтбор Цикл
		
		СтрокаТО.Использовать = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	УстановитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьКолонок(Команда)
	
	СписокЭлементов = Новый СписокЗначений;
	
	Для Каждого ЭлементУправления Из Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		
		//  --> Add Kostromin A. 
		// English script support
		Если (ЭлементУправления.Имя <> "Ссылка" OR ЭлементУправления.Имя <> "Ref")
			И (ЭлементУправления.Имя <> "НомерСтроки" OR ЭлементУправления.Имя <> "LineNumber")
			И ЭлементУправления.Имя <> "ИмяТЧ" Тогда
		// <-- Add Kostromin A.
			
			СписокЭлементов.Добавить(ЭлементУправления.Имя, ЭлементУправления.Заголовок, ЭлементУправления.Видимость);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаКолонок", СписокЭлементов);
	
	ИмяОбъекта = ПолучитьИмяОбработки();
	
	ОткрытьФорму(ИмяОбъекта + ".Форма.ФормаВидимостьКолонок", ПараметрыФормы,Элементы.ТаблицаРезультатОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьТЧПриИзменении(Элемент)
	
	ТаблицаВидыОбъектов.Очистить();
	ТаблицаРезультатОтбор.Очистить();
	ПерезаполнитьДеревоТаблиц(ОбрабатыватьТЧ);
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
		
		ПодготовитьДействиеИзменитьРеквизиты();
		
	КонецЕсли;

	Элементы.ДеревоТаблицГруппаСвернутьРазвернуть.Видимость = ОбрабатыватьТЧ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьДанныеВНастройках();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеВНастройках()
	
	Настройки = Новый Соответствие;
	ЗаполнитьНастройкиПриСохраненииНаСервере(Настройки);
		
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы,, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура  СериализоватьОтбор(пОтбор, ЗаписьXML) Экспорт 
	
	Для Каждого цЭлементОтбора Из пОтбор Цикл
		
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементОтбора);
		
	КонецЦикла;
	
КонецПроцедуры // СериализоватьОтбор()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Настройки = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы);
	ВосстановитьНастройки(Настройки);	
	
	Попытка
	МодульУправлениеПечатью = Вычислить("УправлениеПечатью");
	Исключение
	//БСП не используется
	КонецПопытки;
	
	Если МодульУправлениеПечатью = Неопределено Тогда
		ЕстьУправлениеПечатью = Ложь;
	Иначе 
		ЕстьУправлениеПечатью = Истина;	
	КонецЕсли;
	
	НастройкаДопСвойств();
	
КонецПроцедуры

 &НаСервере
 Процедура НастройкаДопСвойств()
	 
	 //  --> Add Kostromin A. 
	 // English script support
	 
	 If IsRussianScript() Then
		 
		 Если Объект.ДополнительныеСвойства.Количество() > 0 Тогда
			 Элементы.ТаблицаРезультатОтбор.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаРезультатОтборНастроитьДополнительныеСвойства.Заголовок = "ЭтотОбъект.ДополнительныеСвойства УСТАНОВЛЕНЫ";
		 Иначе 
			 Элементы.ТаблицаРезультатОтбор.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаРезультатОтборНастроитьДополнительныеСвойства.Заголовок = "ЭтотОбъект.ДополнительныеСвойства не установлены";
		 КонецЕсли;
		 
	 Else
		 
		 Если Объект.ДополнительныеСвойства.Количество() > 0 Тогда
			 Элементы.ТаблицаРезультатОтбор.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаРезультатОтборНастроитьДополнительныеСвойства.Заголовок = "ThisObject.AdditionalProperties ARE SPECIFIED";
		 Иначе 
			 Элементы.ТаблицаРезультатОтбор.КоманднаяПанель.ПодчиненныеЭлементы.ТаблицаРезультатОтборНастроитьДополнительныеСвойства.Заголовок = "ThisObject.AdditionalProperties ARE NOT SPECIFIED";
		 КонецЕсли;	 
		 
	 EndIf; 
	 
	 // <-- Add Kostromin A.

 КонецПроцедуры
 

&НаСервере
Процедура ДесериализоватьОтбор(пНастройки_Отбор, пОтбор)
	
	пОтбор.Элементы.Очистить();
	
	Если пНастройки_Отбор <> Неопределено Тогда
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(пНастройки_Отбор);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Отборы" Тогда
			
			ЧтениеXML.Прочитать();
			
			Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "Отборы" Цикл
				
				ПолеОтбораXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				ПолеОтбора = пОтбор.Элементы.Добавить(ТипЗнч(ПолеОтбораXML));
				СкопироватьЭлементыОтбораРекурсивно(ПолеОтбораXML, ПолеОтбора);
				//ПолеОтбора.Поле = ПолеОтбораXML.Поле;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДесериализоватьОтбор(

&НаСервере
Процедура СкопироватьЭлементыОтбораРекурсивно(пОтборОткуда, пОтборКуда) Экспорт 
	
	ЗаполнитьЗначенияСвойств(пОтборКуда, пОтборОткуда);
	
	Если ТипЗнч(пОтборОткуда) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементОтбора Из пОтборОткуда.Элементы Цикл
			
			НовыйЭлементОтбора = пОтборКуда.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
			СкопироватьЭлементыОтбораРекурсивно(ЭлементОтбора, НовыйЭлементОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьЭлементыОтбораРекурсивно()

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ТаблицаВидыОбъектов.Очистить();
	ТаблицаРезультатОтбор.Очистить();
	ВыберитеДействие = "";
	
	ПерезаполнитьДеревоТаблиц(ОбрабатыватьТЧ);
	ВидимостьЭлементов();	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоТаблиц(ОбрабатыватьТЧКлиент = Неопределено)
	
	Если ТипОбъекта = "ПланыВидовХарактеристик" Тогда
		
		Элементы.ГруппаДопОтборХарактеристик.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаДопОтборХарактеристик.Видимость = Ложь;
		
	КонецЕсли;	
	
	Если ТипОбъекта = "Константы" Тогда
		
		Элементы.ОбрабатыватьТЧ.Видимость = Ложь;
		ОбрабатыватьТЧ = Ложь;
		Элементы.ДеревоТаблиц.Видимость = Ложь;
		Элементы.Отбор.Видимость = Ложь;
		Элементы.КомпоновщикНастройкиПорядок.Видимость = Ложь;
		
	Иначе
		
		Элементы.ОбрабатыватьТЧ.Видимость = Истина;
		Элементы.ДеревоТаблиц.Видимость = Истина;
		Элементы.Отбор.Видимость = Истина;
		Элементы.КомпоновщикНастройкиПорядок.Видимость = Истина;
		
	КонецЕсли;	
	
	Если ОбрабатыватьТЧКлиент <> Неопределено Тогда
		
		ОбрабатыватьТЧ = ОбрабатыватьТЧКлиент;
		
	КонецЕсли;	
	
	Если Не ТипОбъекта = "Константы" Тогда
	ТаблицаОтмеченных = ТаблицаВидыОбъектов.Выгрузить();
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоТаблиц");
	ДеревоМетаданных.Строки.Очистить();
	
	Для Каждого ЭлементМетаданных Из Метаданные[ТипОбъекта] Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяТаблицы", ЭлементМетаданных.Имя);
		
		НайденныеСтроки = ТаблицаОтмеченных.НайтиСтроки(Отбор);
		
		Если ОбрабатыватьТЧ 
			И ЭлементМетаданных.ТабличныеЧасти.Количество() = 0 Тогда			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДеревоМетаданных.Строки.Добавить();
		
		НоваяСтрока.ПредставлениеТаблицы = ЭлементМетаданных.Синоним;
		НоваяСтрока.ИмяТаблицы			 = ЭлементМетаданных.Имя;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрока.Использовать = Истина;
			
		КонецЕсли;
		
		Если ОбрабатыватьТЧ Тогда
			
			Для Каждого МетаТабличнаяЧасть Из ЭлементМетаданных.ТабличныеЧасти Цикл 
								
				НоваяСтрокаПодчиненная = НоваяСтрока.Строки.Добавить();
				
				НоваяСтрокаПодчиненная.ПредставлениеТаблицы = МетаТабличнаяЧасть.Синоним;
				НоваяСтрокаПодчиненная.ИмяТаблицы			 = МетаТабличнаяЧасть.Имя;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИмяТаблицы", ЭлементМетаданных.Имя);
                Отбор.Вставить("ИмяТЧ", МетаТабличнаяЧасть.Имя);
				
				НайденныеСтроки = ТаблицаОтмеченных.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
			
					НоваяСтрокаПодчиненная.Использовать = Истина;
			
				КонецЕсли;
		
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоМетаданных, "ДеревоТаблиц");
	ОбрабатыватьТЧ = ОбрабатыватьТЧ;
	
	Элементы.ТаблицаРезультатОтбор.Видимость = Истина;
	Элементы.ГруппаВыберитеДействиеОсновное.Видимость = Истина;

	Иначе 
	
	Элементы.ТаблицаРезультатОтбор.Видимость = Ложь;
	Элементы.ГруппаВыберитеДействиеОсновное.Видимость = Ложь;
	
	ЗаполнитьКонстанты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонстанты()
	
 	ТаблицаРеквизиты.Очистить();
	
	Для Каждого ОбъектМетаданных Из Метаданные.Константы Цикл
		
		ОписаниеТиповК = ИсключитьНедопустимыеТипы(ОбъектМетаданных.Тип);
		
		Если ОписаниеТиповК.Типы().Количество() > 0 Тогда
			
			НоваяСтрока = ТаблицаРеквизиты.Добавить();
			
			НоваяСтрока.ИмяРеквизита     = ОбъектМетаданных.Имя;
			НоваяСтрока.СинонимРеквизита= ОбъектМетаданных.Синоним;
			НоваяСтрока.ДоступныеТипыЗначений = ОбъектМетаданных.Тип;
			НоваяСтрока.СтароеЗначение = Константы[ОбъектМетаданных.Имя].Получить();
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	П = Новый Структура;
	П.Вставить("ВыполнятьВТранзакции", Объект.ВыполнятьВТранзакции);
	П.Вставить("ВыполнятьВРежимеЗагрузки", Объект.ВыполнятьВРежимеЗагрузки);
	П.Вставить("НеПрерыватьВыполнениеПриОшибке", Объект.НеПрерыватьВыполнениеПриОшибке);
	ИмяОбъекта = ПолучитьИмяОбработки();
	
	ОткрытьФорму(ИмяОбъекта + ".Форма.ФормаНастройки", П, ЭтаФорма);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТаблицИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанныеЭлемента = Элементы.ДеревоТаблиц.ТекущиеДанные;
	
	Если ТекущиеДанныеЭлемента <> Неопределено Тогда
		
		РодительТекущего = ТекущиеДанныеЭлемента.ПолучитьРодителя();
			
		Если РодительТекущего <> Неопределено Тогда
			
			Если ТекущиеДанныеЭлемента.Использовать = Истина Тогда
				
				РодительТекущего.Использовать = Истина;
				
			Иначе
				
				ОсталисьЗадействованные = Ложь;
				
				ЭлементыРодителя = РодительТекущего.ПолучитьЭлементы();
				
				Для Каждого ЭлементРодителя ИЗ ЭлементыРодителя Цикл
					
					Если ЭлементРодителя.Использовать = Истина Тогда
						
						ОсталисьЗадействованные  = Истина;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				РодительТекущего.Использовать = ОсталисьЗадействованные;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыТекущего = ТекущиеДанныеЭлемента.ПолучитьЭлементы();
		
		Если ЭлементыТекущего <> Неопределено Тогда
			
			Для Каждого ЭлементТекущего Из ЭлементыТекущего Цикл
				
				ЭлементТекущего.Использовать = ТекущиеДанныеЭлемента.Использовать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Очистить();
	НастройкаДопСвойств();
	ТаблицаРезультатОтбор.Очистить();
	ПодготовитьСписокВыбранныхОбъектов();
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбранныхОбъектов()
	
	РезультатВыбора = Новый СписокЗначений;
	ПодготовитьСписокВыбранных(РезультатВыбора);

	КэшОтбора = Объект.Компоновщик.Настройки.Отбор.Элементы;
	
	Если РезультатВыбора <> Неопределено Тогда
			
			Если ОбрабатыватьТЧ = Ложь Тогда 
				
				ТаблицаМетаданных.Очистить();
				ТаблицаВидыОбъектов.Очистить();
				
				Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
					
					НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
					НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение;
					НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
					
				КонецЦикла;
				
				ТаблицаРезультатОтбор.Очистить();
				
				ИнициализироватьСКД();
				
				Если Не  ВыберитеДействие = "ИзменитьРеквизиты" Тогда
					
					ВыберитеДействие = "";
					
				КонецЕсли;
				
			Иначе
				
				ТаблицаМетаданных.Очистить();
				ТаблицаВидыОбъектов.Очистить();
				ТаблицаРезультатОтбор.Очистить();
				
				Для Каждого ЭлементРезультат Из РезультатВыбора Цикл
					
					НоваяСтрока = ТаблицаВидыОбъектов.Добавить();
					НоваяСтрока.ИмяТаблицы = ЭлементРезультат.Значение.ИмяОбъекта;
					НоваяСтрока.ИмяТЧ = ЭлементРезультат.Значение.ИмяТЧ;
					НоваяСтрока.ПредставлениеТаблицы = ЭлементРезультат.Представление;
					
				КонецЦикла;
				
				ИнициализироватьСКД();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИнициализироватьДействия();
		
	КэшВидимыхКолонок.Очистить();	
	
	ВосстановаитьОтборИзКэша(Объект.Компоновщик.Настройки.Отбор.Элементы, КэшОтбора, Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора);
	
		
	ОчиститьУО();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУО();
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() > 0 Тогда
		
		ЭтаФорма.УсловноеОформление.Элементы.Очистить();
		
	КонецЕсли;
	
	ДобавитьОбщиеОбъектыУО();

КонецПроцедуры

&НаСервере
Процедура ВосстановаитьОтборИзКэша(ЭлементыОтбора, КэшОтбора, ОтборДоступныеПоляОтбора)
	
	Если КэшОтбора.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из КэшОтбора Цикл
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				НовоеПоле = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовоеПоле,ЭлементОтбора);
				ВосстановаитьОтборИзКэша(НовоеПоле.Элементы, ЭлементОтбора.Элементы, ОтборДоступныеПоляОтбора)
				
			Иначе
				
			Если Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение) <> Неопределено Тогда
				
				 НовоеПоле  = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				 ЗаполнитьЗначенияСвойств(НовоеПоле, ЭлементОтбора);
				
			КонецЕсли;	
			
			КонецЕсли;
		
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокВыбранных(СписокВыбора)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоТаблиц");
	
	Если ОбрабатыватьТЧ = Ложь Тогда
		
		Для Каждого ЭлементМетаданных Из ДеревоМетаданных.Строки Цикл
			
			Если ЭлементМетаданных.Использовать Тогда
				
				СписокВыбора.Добавить(ЭлементМетаданных.ИмяТаблицы,ЭлементМетаданных.ПредставлениеТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе 
		
		Для Каждого ЭлементМетаданных Из ДеревоМетаданных.Строки Цикл
			
			Если ЭлементМетаданных.Использовать Тогда
						
				Для Каждого ТЧОбъекта Из ЭлементМетаданных.Строки Цикл
					
					Если ТЧОбъекта.Использовать Тогда
						
						Структура = Новый Структура;
						Структура.Вставить("ИмяОбъекта", ЭлементМетаданных.ИмяТаблицы);
						Структура.Вставить("ИмяТЧ", ТЧОбъекта.ИмяТаблицы);
						
						СписокВыбора.Добавить(Структура , ЭлементМетаданных.ПредставлениеТаблицы + " [ ТЧ: " + ТЧОбъекта.ПредставлениеТаблицы + " ]");
						
					КонецЕсли;
					
				КонецЦикла;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиПорядокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсеОбъекты(Команда)
	
	УставновитьВсеОбъекты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УставновитьВсеОбъекты(НовоеЗначение)
	
	НаборСтрокДерева  = ДеревоТаблиц.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из НаборСтрокДерева Цикл
		
		СтрокаДерева.Использовать = НовоеЗначение;
		
		Для Каждого СтрокаПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
			
			СтрокаПодчиненная.Использовать = НовоеЗначение;
			
		КонецЦикла;		
		
	КонецЦикла;
	
	ПодготовитьСписокВыбранныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсеОбъекты(Команда)
	
	  УставновитьВсеОбъекты(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияХарактеристикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПоТипуДляХарактеристик =  Истина;

	ТипыВыбранные = ТипЗначенияХарактеристики.Типы();
	ИнициализироватьДопОтборХарактеристик();
	П = Новый Структура;
	П.Вставить("МассивТипов", ТипыВыбранные);
	П.Вставить("ДоступныеТипы", ТипЗначенияХарактеристики);
	ИмяОбъекта = ПолучитьИмяОбработки();
	
	ОткрытьФорму(ИмяОбъекта + ".Форма.ФормаВыбораТиповХарактеристики", П, Элементы.ТипЗначенияХарактеристики);
		
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ЗаполнитьНастройкиПриСохраненииНаСервере(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПриСохраненииНаСервере(Настройки)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Соответствие;
		
	КонецЕсли;
	
	Настройки.Вставить("ОбрабатыватьТЧ", ОбрабатыватьТЧ);
	Настройки.Вставить("ТаблицаВидыОбъектов", ТаблицаВидыОбъектов.Выгрузить());
	Настройки.Вставить("РезультатВыбора", РезультатВыбора);
	Настройки.Вставить("ТипОбъекта", ТипОбъекта);
	
	Настройки.Вставить("ВыполнятьВТранзакции", Объект.ВыполнятьВТранзакции);
	Настройки.Вставить("ВыполнятьВРежимеЗагрузки", Объект.ВыполнятьВРежимеЗагрузки);
	
	Настройки.Вставить("ОтборПоТипуДляХарактеристик", ОтборПоТипуДляХарактеристик);
	Настройки.Вставить("РежимОтбораХарактеристик", РежимОтбораХарактеристик);
	Настройки.Вставить("ТипЗначенияХарактеристики", ТипЗначенияХарактеристики);	
	Настройки.Вставить("КэшВидимыхКолонок", КэшВидимыхКолонок);	
	Настройки.Вставить("НеПрерыватьВыполнениеПриОшибке", Объект.НеПрерыватьВыполнениеПриОшибке);	
	
	ДополнительныеСвойства = Новый Структура;
	
	Для Каждого СтрДопСвойств Из Объект.ДополнительныеСвойства Цикл
		
		ДополнительныеСвойства.Вставить(СтрДопСвойств.Ключ, СтрДопСвойств.Значение);
		
	КонецЦикла;
	
	Настройки.Вставить("ДополнительныеСвойства",ДополнительныеСвойства);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отборы");	
	
	СериализоватьОтбор(Объект.Компоновщик.Настройки.Отбор.Элементы, ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ХранилищеНастроек = ЗаписьXML.Закрыть();
	
	Настройки.Вставить("Отбор", ХранилищеНастроек);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВосстановитьНастройки(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура  ВосстановитьНастройки(Настройки)
	
	  Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		
		ОбрабатыватьТЧ = Настройки["ОбрабатыватьТЧ"];
		ТипОбъекта = Настройки["ТипОбъекта"];
		
		Если Настройки["ТаблицаВидыОбъектов"] <> Неопределено Тогда
			
			ТаблицаВидыОбъектов.Загрузить(Настройки["ТаблицаВидыОбъектов"]);
			
		КонецЕсли;
		
		Для Каждого ЭлементВыборка Из Настройки["РезультатВыбора"] Цикл
			
			РезультатВыбора.Добавить(ЭлементВыборка.Значение, ЭлементВыборка.Представление);
			
		КонецЦикла;
			
		Если Настройки.Получить("ВыполнятьВТранзакции") <> Неопределено Тогда
			
			Объект.ВыполнятьВТранзакции = Настройки.Получить("ВыполнятьВТранзакции");
			
		КонецЕсли;
		
		Если Настройки.Получить("ВыполнятьВРежимеЗагрузки") <> Неопределено Тогда
			
			Объект.ВыполнятьВРежимеЗагрузки = Настройки.Получить("ВыполнятьВРежимеЗагрузки");
			
		КонецЕсли;
		
		Если  Настройки.Получить("ОтборПоТипуДляХарактеристик") <> Неопределено Тогда
			
			ОтборПоТипуДляХарактеристик = Настройки.Получить("ОтборПоТипуДляХарактеристик");
			
		КонецЕсли;			
		
		Если  Настройки.Получить("РежимОтбораХарактеристик") <> Неопределено Тогда
			
			РежимОтбораХарактеристик = Настройки.Получить("РежимОтбораХарактеристик");
			
		КонецЕсли;	
		
		Если  Настройки.Получить("ТипЗначенияХарактеристики") <> Неопределено Тогда
			
			ТипЗначенияХарактеристики = Настройки.Получить("ТипЗначенияХарактеристики");
			
		КонецЕсли;	
		
		Если  Настройки.Получить("КэшВидимыхКолонок") <> Неопределено Тогда
			
			Для Каждого КэшированнаяКолонка Из  Настройки.Получить("КэшВидимыхКолонок") Цикл
				
				КэшВидимыхКолонок.Добавить(КэшированнаяКолонка.Значение);
				
			КонецЦикла;			
			
		КонецЕсли;	

		Если Настройки.Получить("НеПрерыватьВыполнениеПриОшибке") <> Неопределено Тогда
			
			Объект.НеПрерыватьВыполнениеПриОшибке =Настройки.Получить("НеПрерыватьВыполнениеПриОшибке"); 
			
		КонецЕсли;
		
		Если Настройки.Получить("ДополнительныеСвойства") <> Неопределено Тогда
			
			Для Каждого ДопСвойство Из Настройки.Получить("ДополнительныеСвойства") Цикл
				
				НоваяСтрока = Объект.ДополнительныеСвойства.Добавить();
				НоваяСтрока.Ключ = ДопСвойство.Ключ;
				НоваяСтрока.Значение = ДопСвойство.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		 ТипОбъекта = "Справочники";
		
	КонецЕсли;

	Попытка
			
			ПерезаполнитьДеревоТаблиц();
			ИнициализироватьСКД();
			ДесериализоватьОтбор(Настройки["Отбор"], Объект.Компоновщик.Настройки.Отбор);
			
	Исключение
			
			//Не удалось восстановить настройки (например, конфигурация была изменена)
			
	КонецПопытки;

	Если СтрДлина(РежимОтбораХарактеристик) = 0 Тогда
		
		РежимОтбораХарактеристик = "По выбранным значениям";
		
	КонецЕсли;
	
	Если ВыберитеДействие <> "ИзменитьРеквизиты"
		И ТипОбъекта <> "Константы" Тогда
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Ложь;
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаРедактироватьРеквизиты.Видимость = Истина;
		Элементы.ТаблицаРеквизитыСтароеЗначение.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеВозможныеПоляОтбора(Команда)
	
	ДобавитьВсеВозможныеПоляОтбораСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеВозможныеПоляОтбораСервер()
	
	Для Каждого ДоступноеПолеОтбора Из Объект.Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.Элементы Цикл
		
		   НовоеПолеОтбора = Объект.Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		   НовоеПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДоступноеПолеОтбора.Поле);
		   
		   Если ДоступноеПолеОтбора.ДоступныеВидыСравнения.Количество() > 0 Тогда
			   
			   НовоеПолеОтбора.ВидСравнения =  ДоступноеПолеОтбора.ДоступныеВидыСравнения.Получить(0).Значение;
			   
		   КонецЕсли;
		   
	    НовоеПолеОтбора.Использование = Ложь;
		 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	     
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
		
		ПодготовитьДействиеИзменитьРеквизиты();
		
	КонецЕсли;
	
	Элементы.ДеревоТаблицГруппаСвернутьРазвернуть.Видимость = ОбрабатыватьТЧ;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УстановитьОграничениеТипов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитыПередНачаломИзменения(Элемент, Отказ)
	
	УстановитьОграничениеТипов(Элемент);
	
КонецПроцедуры

 &НаКлиенте
Процедура УстановитьОграничениеТипов(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элемент.ПодчиненныеЭлементы.ТаблицаРеквизитыНовоеЗначение.ОграничениеТипа = ТекущиеДанные.ДоступныеТипыЗначений;
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	  
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.Изменять = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитыНовоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные =  Элементы.ТаблицаРеквизиты.ТекущиеДанные;
	УстановитьВидимостьКолонокПоДопРеквизитам(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонокПоДопРеквизитам(ТекущаяСтрока)
	
	ЭлементКолонка = Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти(ТекущаяСтрока.ИмяРеквизита); 
	
	Если ЭлементКолонка <> Неопределено Тогда
		
		   ЭлементКолонка.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоТаблицСвернуть(Команда)
	
	Если Команда.Имя = "ДеревоТаблицРазвернуть" Тогда
		
		ВыполняемоеДействие = "Развернуть";
		
	Иначе
		
		ВыполняемоеДействие = "Свернуть";
		
	КонецЕсли;
	
	СвернутьРазвернутьСписокТаблиц(ВыполняемоеДействие);
	
КонецПроцедуры

&НаКлиенте	
Процедура СвернутьРазвернутьСписокТаблиц(ВыполняемоеДействие)
	
	ЭлементыДерева = ДеревоТаблиц.ПолучитьЭлементы();
	
	Для Каждого СтрокаСпискаТаблиц Из ЭлементыДерева  Цикл
		
		Если ВыполняемоеДействие = "Свернуть" Тогда
			
			Элементы.ДеревоТаблиц.Свернуть(СтрокаСпискаТаблиц.ПолучитьИдентификатор());
		
		Иначе 
			
			Элементы.ДеревоТаблиц.Развернуть(СтрокаСпискаТаблиц.ПолучитьИдентификатор());
				
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеВозможныеПоляСортировки(Команда)
	
	   Для Каждого ДоступноеПолеСортировки Из Объект.Компоновщик.Настройки.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		
		   НовоеПолеПорядка = Объект.Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		   
		   НовоеПолеПорядка.Поле = Новый ПолеКомпоновкиДанных(ДоступноеПолеСортировки.Поле);
		   НовоеПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		   
	       НовоеПолеПорядка.Использование = Ложь;
		 
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОбработки(Команда)	
	
	ПерейтиПоНавигационнойСсылке("http://infostart.ru/public/189338/");	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//&НаКлиенте	
//Функция ПолучитьИмяФормыКлиент()
//	
//	Возврат "ВнешняяОбработка.ГрупповаяОбработкаСправочниковИДокументов.Форма";
//	
//КонецФункции

&НаКлиенте	
Функция ПолучитьИмяОбработки()
	
	ТекущееИмяФормы=ЭтаФорма.ИмяФормы;
	//  --> Add Kostromin A. 
	// English script support
	If IsRussianScript() Then		
		ПозицияФорма=Найти(ТекущееИмяФормы,".Форма.");
	Else
		ПозицияФорма=Найти(ТекущееИмяФормы,".Form.");	
	EndIf;
	// <-- Add Kostromin A. 
	
	ИмяОбработки = Лев(ТекущееИмяФормы, ПозицияФорма - 1);
	
	Возврат ИмяОбработки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если ВыбранноеЗначение.Свойство("ДополнительныеСвойства") Тогда
			
			Для Каждого ДопСвойство Из ВыбранноеЗначение.ДополнительныеСвойства Цикл
				
				НоваяСтрока = Объект.ДополнительныеСвойства.Добавить();
				НоваяСтрока.Ключ = ДопСвойство.Ключ;
				НоваяСтрока.Значение = ДопСвойство.Значение;
				
			КонецЦикла;
			
			НастройкаДопСвойств();
			
		Иначе 
			
			Объект.ВыполнятьВТранзакции = ВыбранноеЗначение.ВыполнятьВТранзакции;
			Объект.ВыполнятьВРежимеЗагрузки = ВыбранноеЗначение.ВыполнятьВРежимеЗагрузки;
			Объект.НеПрерыватьВыполнениеПриОшибке = ВыбранноеЗначение.НеПрерыватьВыполнениеПриОшибке;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРезультатОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РезультатНастройки = ВыбранноеЗначение;
	
	Если РезультатНастройки <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из РезультатНастройки Цикл
			
			КолонкаИзменятьВидимость = Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы.Найти(ЭлементСписка.Значение);
			
			Если КолонкаИзменятьВидимость <> Неопределено Тогда
				
				КолонкаИзменятьВидимость.Видимость = ЭлементСписка.Пометка;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого КолонкаТаблицыФормы Из Элементы.ТаблицаРезультатОтбор.ПодчиненныеЭлементы.ТаблицаРезультатОтборПрограммно.ПодчиненныеЭлементы Цикл
		
		Если КолонкаТаблицыФормы.Видимость = Истина Тогда
			
			Если КэшВидимыхКолонок.НайтиПоЗначению(КолонкаТаблицыФормы.Имя) = Неопределено тогда
				
				КэшВидимыхКолонок.Добавить(КолонкаТаблицыФормы.Имя);
			  
		  	КонецЕсли;	
		  
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияХарактеристикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		МассивТипов = Новый Массив;
		
		Для Каждого ВыбранныйТип Из ВыбранноеЗначение Цикл
			
			Если ВыбранныйТип.Пометка Тогда
				
				МассивТипов.Добавить(ВыбранныйТип.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТипЗначенияХарактеристики = Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПроцент(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	УстановитьНовоеДействие();
	ВидимостьЭлементов();
	
	Если ВыберитеДействие = "ИзменитьРеквизиты" Тогда
		
		ПодготовитьДействиеИзменитьРеквизиты();
		
	ИначеЕсли ВыберитеДействие = "Печать" Тогда
		
		ПодготовитьСписокПечатныхФормОбъектов();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДополнительныеСвойства(Команда)
	
	П = Новый Структура;
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ДополнительныеСвойства = Новый Структура;
	
	Для Каждого ДопСвойство Из Объект.ДополнительныеСвойства Цикл
		
		ДополнительныеСвойства .Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
		
	КонецЦикла;
	
	П.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);	
	
	ИмяОбъекта = ПолучитьИмяОбработки();
	
	//  --> Add Kostromin A. 
	// English script support
	
	If IsRussianScript() Then
		ОткрытьФорму(ИмяОбъекта + ".Форма.ФормаДополнительныеСвойства",П,ЭтаФорма);
	Else
		ОткрытьФорму(ИмяОбъекта + ".Form.ФормаДополнительныеСвойства",П,ЭтаФорма);
	EndIf; 
		
	// <-- Add Kostromin A. 

КонецПроцедуры

//  --> Add Kostromin A. 
// English script support
//
//
Function IsRussianScript()
	Return String(Метаданные.ScriptVariant) = "Русский";		
EndFunction 

// Removes given substring from the beginning of the line (only)
//
Function RemoveSubStrLeft(Str, SubStr) Export
	SubStrLen = StrLen(SubStr);
	If Left(Str, SubStrLen) = SubStr Then
		Return Mid(Str, SubStrLen + 1) 
	EndIf; 
	Return Str;	
EndFunction


// <-- Add Kostromin A.